const validEventTypes = new Set(
  ["abort", "afterprint", "animationcancel", "animationend", "animationiteration", "animationstart", "appinstalled", "audioprocess", "The definition of 'audioprocess' in that specification.", "audioend ", "audiostart ", "beforeprint", "beforeunload", "beginEvent", "blocked", "blur", "boundary ", "canplay", "canplaythrough", "change", "chargingchange", "chargingtimechange", "click", "close", "complete", "The definition of 'OfflineAudioCompletionEvent' in that specification.", "compositionend", "compositionstart", "compositionupdate", "contextmenu", "copy", "cut", "dblclick", "devicechange", "devicemotion", "deviceorientation", "dischargingtimechange", "DOMActivate ", "DOMAttributeNameChanged ", "DOMAttrModified ", "DOMCharacterDataModified ", "DOMContentLoaded", "DOMElementNameChanged ", "DOMFocusIn ", "DOMFocusOut ", "DOMNodeInserted ", "DOMNodeInsertedIntoDocument ", "DOMNodeRemoved ", "DOMNodeRemovedFromDocument ", "DOMSubtreeModified ", "drag", "dragend", "dragenter", "dragleave", "dragover", "dragstart", "drop", "durationchange", "emptied", "end ", "ended", "endEvent", "error", "error ", "focus", "focusin", "focusout", "fullscreenchange", "fullscreenerror", "gamepadconnected", "gamepaddisconnected", "gotpointercapture", "hashchange", "lostpointercapture", "input", "invalid", "keydown", "keypress ", "keyup", "languagechange ", "The definition of 'NavigatorLanguage.languages' in that specification.", "levelchange", "load", "loadeddata", "loadedmetadata", "loadend", "loadstart", "mark ", "message", "messageerror", "message ", "mousedown", "mouseenter", "mouseleave", "mousemove", "mouseout", "mouseover", "mouseup", "nomatch ", "notificationclick", "The definition of 'onnotificationclick' in that specification.", "offline", "online", "open", "orientationchange", "pagehide", "pageshow", "paste", "pause", "pause ", "pointercancel", "pointerdown", "pointerenter", "pointerleave", "pointerlockchange", "pointerlockerror", "pointermove", "pointerout", "pointerover", "pointerup", "play", "playing", "popstate", "progress", "push", "pushsubscriptionchange", "ratechange", "readystatechange", "repeatEvent", "reset", "resize", "resourcetimingbufferfull", "result ", "resume ", "scroll", "seeked", "seeking", "select", "selectstart ", "selectionchange ", "show", "slotchange", "soundend ", "soundstart ", "speechend ", "speechstart ", "stalled", "start ", "start", "storage", "submit", "success", "suspend", "SVGAbort", "SVGError", "SVGLoad", "SVGResize", "SVGScroll", "SVGUnload", "SVGZoom", "timeout", "timeupdate", "touchcancel", "touchend", "touchmove", "touchstart", "transitionend", "unload", "upgradeneeded", "userproximity", "voiceschanged ", "versionchange", "visibilitychange", "volumechange", "waiting", "wheel"]
);

export const isValidEventType = (type) => validEventTypes.has(type);